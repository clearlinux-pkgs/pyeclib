From a3c7ee640158960610092bf451a01c4a1c7eb01d Mon Sep 17 00:00:00 2001
From: "Simental Magana, Marcos" <marcos.simental.magana@intel.com>
Date: Wed, 22 Jul 2015 11:25:32 -0500
Subject: [PATCH] Fix build for x64

this is a merge between commit ffaa7addbceec6f1811363bdf9a88a499ef75840 [1]
and pull request #25 (c9bbfa9) [2].
This patch is likely to be removed for next version when /usr/lib64 support
is added in upstream.

[1] - https://bitbucket.org/kmgreen2/pyeclib/commits/ffaa7addbceec6f1811363bdf9a88a499ef75840
[2] - https://bitbucket.org/kmgreen2/pyeclib/pull-request/25/build-107-in-fedora/diff
---
 setup.py | 215 +++++++++++++++++++--------------------------------------------
 1 file changed, 65 insertions(+), 150 deletions(-)

diff --git a/setup.py b/setup.py
index a8cf368..750a81e 100644
--- a/setup.py
+++ b/setup.py
@@ -45,31 +45,19 @@ from setuptools import Extension
 from setuptools.command.install import install as _install
 
 platform_str = platform.platform()
+platform_arch = platform.architecture()
 default_python_incdir = get_python_inc()
 default_python_libdir = get_python_lib()
-
-#
-# ToDo: Note the hardcoded location of liberasurecode.
-# This will be removed once liberasurecode is no longer
-# packaged with PyECLib.  This is silly, but we (Kevin
-# and Tushar) cannot explain what is going on with
-# distutils or libtool here.
-#
-standard_library_paths = [('%s/usr/local/lib' % _exec_prefix),
-                          '/lib', '/usr/lib', '/usr/local/lib']
-
-default_library_paths = [default_python_libdir,
-                         ('%s/usr/local/lib' % _exec_prefix),
-                         '/lib', '/usr/lib', '/usr/local/lib',
-                         'src/c/liberasurecode-1.0.7/src/.libs']
-
-default_include_paths = [default_python_incdir,
-                         '/usr/local/include', '/usr/local/include/jerasure',
-                         '/usr/include', 'src/c/pyeclib_c',
-                         '/usr/local/include']
-
-libflags = ''
-includeflags = ''
+if "64bit" in platform_arch and os.path.exists('/usr/lib64'):
+    default_library_paths = [
+        default_python_libdir,
+        ('%s/lib64' % _exec_prefix),
+        '/usr/lib64', '/usr/local/lib64']
+else:
+    default_library_paths = [
+        default_python_libdir,
+        ('%s/lib' % _exec_prefix),
+        '/lib', '/usr/lib', '/usr/local/lib']
 
 # utility routines
 def _read_file_as_str(name):
@@ -77,128 +65,43 @@ def _read_file_as_str(name):
         s = f.readline().strip()
     return s
 
-def _get_installroot(distribution):
-    install_cmd = distribution.get_command_obj('install')
-    install_lib = distribution.get_command_obj('install_lib')
-    for cmd in (install_lib, install_cmd):
-        cmd.ensure_finalized()
-
-    # ensure that the paths are absolute so we don't get lost
-    opts = {'exec_prefix': install_cmd.exec_prefix,
-            'root': install_cmd.root}
-    for optname, value in list(opts.items()):
-        if value is not None:
-            opts[optname] = os.path.abspath(value)
-
-    prefix = opts['exec_prefix']
-    root = opts['root']
-
-    # prefer root for installdir
-    if root is not None:
-        installroot = root
-    elif prefix is not None:
-        installroot = prefix
-    else:
-        installroot = "/"
-
-    # exception is "/usr"
-    if installroot.startswith("/usr"):
-        installroot = "/"
-
-    return installroot
-
-def _check_library(library, soname, library_url, mode, distribution):
-    global libflags
-    global includeflags
-    missing = True
-    library_suffix = ".so"
-    if platform_str.find("Darwin") > -1:
-        library_suffix = ".dylib"
-    library_file = soname + library_suffix
-    for dir in (standard_library_paths):
-        library_file_path = dir + os.sep + library_file
-        if (os.path.isfile(library_file_path)):
-            missing = False
-            break
-    if missing:
-        # try using an integrated copy of the library
-        srcpath = "src/c/"
-        locallibsrcdir = (srcpath + library)
-        installroot = _get_installroot(distribution)
-
-        retval = os.system("tar xf %s/%s.tar.gz -C %s" % (srcpath, library, srcpath))
 
-        if (os.path.isdir(locallibsrcdir)):
-            # patch default include, lib paths
-            topdir = os.getcwd()
-            libdirs = [ (topdir + "/" + locallibsrcdir + "/.libs "),
-                        (topdir + "/" + locallibsrcdir + "/src/.libs ")] 
-            for d in libdirs:
-                libflags = libflags + " -L" + d
-                default_library_paths.append(d)
-
-            includeflags = includeflags + " -I" + topdir + "/" + locallibsrcdir + "/include"
-            for subdir in os.walk(topdir + "/" + locallibsrcdir + "/include"):
-                if (os.path.isdir(subdir[0])):
-                    includeflags = includeflags + " -I" + subdir[0]
-                    default_include_paths.append(subdir[0])
+class build(_build):
 
-            curdir = os.getcwd()
-            os.chdir(locallibsrcdir)
-            statefile = "." + library + "_configured"
-            if (not os.path.isfile(statefile)):
-                configure_cmd = ("CFLAGS=\"%s\" LDFLAGS=\"%s\" " % (includeflags, libflags))
-                configure_cmd = ("%s ./configure --prefix=%s/usr/local" % \
-                    (configure_cmd, installroot))
-                print(configure_cmd)
-                retval = os.system(configure_cmd)
-                if retval == 0:
-                    touch_cmd = ("touch " + statefile)
-                    os.system(touch_cmd)
-                elif retval != 0:
-                    print("***************************************************")
-                    print("*** Error: " + library + " build failed!")
-                    print("*** Please install " + library + " manually and retry")
-                    print("**   " + library_url)
-                    print("***************************************************")
-                    os.chdir(curdir)
-                    sys.exit(retval)
-            make_cmd = ("make")
-            if mode == "install":
-                make_cmd = ("%s && make install" % make_cmd)
-            retval = os.system(make_cmd)
-            if retval != 0:
-                print("***************************************************")
-                print("*** Error: " + library + " install failed!")
-                print("** Please install " + library + " manually and retry")
-                print("**   " + library_url)
-                print("***************************************************")
-                os.chdir(curdir)
-                sys.exit(retval)
-            os.chdir(curdir)
-        else:
+    def check_liberasure(self):
+        missing = True
+        library_suffix = ".so"
+        if platform_str.find("Darwin") > -1:
+            library_suffix = ".dylib"
+        liberasure_file = "liberasurecode" + library_suffix
+        for dir in (default_library_paths):
+            liberasure_file_path = dir + os.sep + liberasure_file
+            if (os.path.isfile(liberasure_file_path)):
+                missing = False
+                break
+        if missing:
             print("***************************************************")
-            print("** Cannot locate the " + library + " library:  ")
-            print("**   %s" % (library_file))
-            print("**")
-            print("** PyECLib requires that " + library)
-            print("** library be installed from:")
-            print("**   " + library_url)
-            print("**")
-            print("** Please install " + library + " and try again.")
+            print("**                                                 ")
+            print("** Can not locate the liberasurecode library:      ")
+            print("**   %s" % (liberasure_file))
+            print("**                                                 ")
+            print("** PyECLib requires that the liberasurecode        ")
+            print("** library be installed.                           ")
+            print("**                                                 ")
+            print("** Please retry after installing liberasurecode:   ")
+            print("**  https://bitbucket.org/tsg-/liberasurecode.git  ")
+            print("**                                                 ")
+            print("** If you have liberasurecode already installed,   ")
+            print("** you may need to run 'sudo ldconfig' to update   ")
+            print("** the loader cache.                               ")
+            print("**                                                 ")
             print("***************************************************")
             sys.exit(1)
 
-
-class build(_build):
-
     def run(self):
-        _check_library("liberasurecode-1.0.7", "liberasurecode",
-                       "https://bitbucket.org/tsg-/liberasurecode.git",
-                       "build", self.distribution)
+        self.check_liberasure()
         _build.run(self)
 
-
 class clean(_clean):
 
     def run(self):
@@ -208,17 +111,24 @@ class clean(_clean):
 class install(_install):
 
     def run(self):
-        _check_library("liberasurecode-1.0.7", "liberasurecode",
-                       "https://bitbucket.org/tsg-/liberasurecode.git",
-                       "install", self.distribution)
-        _check_library("gf-complete-1.0", "libgf_complete",
-                       "http://lab.jerasure.org/jerasure/gf-complete.git",
-                       "install", self.distribution)
-        _check_library("jerasure-2.0", "libJerasure",
-                       "http://lab.jerasure.org/jerasure/jerasure.git",
-                       "install", self.distribution)
-        installroot = _get_installroot(self.distribution)
-        default_library_paths.insert(0, "%s/usr/local/lib" % installroot)
+        install_cmd = self.distribution.get_command_obj('install')
+        install_lib = self.distribution.get_command_obj('install_lib')
+        for cmd in (install_lib, install_cmd):
+            cmd.ensure_finalized()
+
+        # ensure that the paths are absolute so we don't get lost
+        opts = {'exec_prefix': install_cmd.exec_prefix,
+                'root': install_cmd.root}
+        for optname, value in list(opts.items()):
+            if value is not None:
+                opts[optname] = os.path.abspath(value)
+
+        prefix = opts['exec_prefix']
+        root = opts['root']
+
+        installroot = install_lib.install_dir
+
+        default_library_paths.insert(0, installroot)
         _install.run(self)
 
         # Another Mac-ism...  If the libraries are installed
@@ -231,13 +141,13 @@ class install(_install):
         print("***************************************************")
         print("**                                                 ")
         print("** PyECLib libraries have been installed to:       ")
-        print("**   %susr/local/lib" % installroot)
+        print("**   %s" % installroot)
         print("**                                                 ")
         print("** Any user using this library must update:        ")
         print("**   %s" % ldpath_str)
         print("**                                                 ")
         print("** Run 'ldconfig' or place this line:              ")
-        print("**   export %s=%s" % (ldpath_str, "%susr/local/lib"
+        print("**   export %s=%s" % (ldpath_str, "%s"
                                      % installroot))
         print("**                                                 ")
         print("** into .bashrc, .profile, or the appropriate shell")
@@ -250,7 +160,12 @@ class install(_install):
 module = Extension('pyeclib_c',
                    define_macros=[('MAJOR VERSION', '0'),
                                   ('MINOR VERSION', '9')],
-                   include_dirs=default_include_paths,
+                   include_dirs=[default_python_incdir,
+                                 '/usr/local/include/liberasurecode',
+                                 '/usr/local/include/jerasure',
+                                 '/usr/include',
+                                 'src/c/pyeclib_c',
+                                 '/usr/local/include'],
                    library_dirs=default_library_paths,
                    runtime_library_dirs=default_library_paths,
                    libraries=['erasurecode'],
-- 
2.1.0

